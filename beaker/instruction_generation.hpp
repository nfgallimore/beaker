#pragma once

#include <beaker/common.hpp>

namespace llvm
{
  class LLVMContext;
  class Module;
  class Type;
  class Value;
  class Function;
  class BasicBlock;
} // namespace llvm

namespace beaker
{
  class Function_context;
  class Bool_literal;
  class Int_literal;
  class Id_expression;
  class Value_initializer;

  /// Provides context for translating a single statement or expression.
  /// Subexpressions and substatements are recursive generated by establishing
  /// a new context.
  class Instruction_generator
  {
  public:
    Instruction_generator(Function_context& parent);

    // Context

    /// Returns the Beaker context.
    Context& get_beaker_context() const;

    /// Returns the LLVM context.
    llvm::LLVMContext* get_llvm_context() const;

    /// Returns the LLVM module.
    llvm::Module* get_llvm_module() const;

    /// Returns the LLVM function.
    llvm::Function* get_llvm_function() const;

    // Blocks

    /// Returns the current block.
    llvm::BasicBlock* get_current_block() const;

    /// Emits `b`, making it the current block.
    void emit_block(llvm::BasicBlock* b);

    // Declarations

    /// Locally associate a declaration with its value.
    void declare(const Typed_declaration* d, llvm::Value* v);

    /// Returns the value associated with `d`.
    llvm::Value* lookup(const Typed_declaration* d);

    // Generation

    /// Generates the corresponding type for `t`.
    llvm::Type* generate_type(const Type* t);

    /// Generates the corresponding type for `d`.
    llvm::Type* generate_type(const Typed_declaration* d);

    /// Recursively generate the sequence of instructions to compute `e`.
    llvm::Value* generate_expression(const Expression* e);
    llvm::Value* generate_bool_literal(const Bool_literal* e);
    llvm::Value* generate_int_literal(const Int_literal* e);
    llvm::Value* generate_id_expression(const Id_expression* e);
    llvm::Value* generate_value_init(const Value_initializer* e);

    /// Generate the sequence of statements for to execute `s`.
    void generate_statement(const Statement* s);

  private:
    /// The parent context.
    Function_context& m_parent;
  };

} // namespace beaker
